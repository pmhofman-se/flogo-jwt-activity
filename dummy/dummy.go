package main

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/golang-jwt/jwt/v5"
)

// Function to extract and parse the header and payload from a JWT
func extractJWTInfo(tokenString string) {
	// Parse the token without verifying the signature
	token, _, err := jwt.NewParser(jwt.WithoutClaimsValidation()).ParseUnverified(tokenString, jwt.MapClaims{})
	if err != nil {
		log.Fatalf("Error parsing JWT: %v", err)
	}

	// Extract and print the header
	header := token.Header
	fmt.Println("Header:")
	for key, value := range header {
		fmt.Printf("%s: %v\n", key, value)
	}

	// Extract and print the payload (claims)
	if claims, ok := token.Claims.(jwt.MapClaims); ok {
		fmt.Println("Payload (Claims):")
		for key, value := range claims {
			fmt.Printf("%s: %v\n", key, value)
		}
	} else {
		fmt.Println("Unable to extract claims.")
	}
	tokenStr, _ := json.Marshal(token)
	fmt.Print(string(tokenStr))

}

func main() {
	// Example JWT token (Replace with your token)
	tokenString := "eyJ4NXQjUzI1NiI6IkNmSGNrTFN3MHdmYW5UU1BGaVpzQ19uNUJaUzJGcnFjdEFkWWFhYXlFSGsiLCJ4NXQiOiJKREpsNzB1RERRdGsxX1VwY0VhSUNoUlJXUVEiLCJraWQiOiJTSUdOSU5HX0tFWSIsImFsZyI6IlJTMjU2In0.eyJjbGllbnRfb2NpZCI6Im9jaWQxLmRvbWFpbmFwcC5vYzEuZXUtZnJhbmtmdXJ0LTEuYW1hYWFhYWFqdG14Y255YTV6ZDJ2cTR1aW5rNHplbG9hZjc3ZzcybnE2c2s2d2RiYm5vY3F5cnFyYW1xIiwic3ViIjoiZTFmNmU0MGJhZTJmNGQzMTk1ZWQ0NDAxOWU1NDhhNzEiLCJzaWRsZSI6NDgwLCJ1c2VyLnRlbmFudC5uYW1lIjoiaWRjcy03Yzg0OTFlYTZkMTk0NzNhYmRkMjY2OTA2MDE0NDkyMSIsImlzcyI6Imh0dHBzOlwvXC9pZGVudGl0eS5vcmFjbGVjbG91ZC5jb21cLyIsImRvbWFpbl9ob21lIjoiZXUtZnJhbmtmdXJ0LTEiLCJjYV9vY2lkIjoib2NpZDEudGVuYW5jeS5vYzEuLmFhYWFhYWFhMnBoeHh2ZnZjYmo3Z3N5emFtdHRvenB6b2NpdDZreHF3aHJxMm0zemppNnJ3emk2Y3R2cSIsImNsaWVudF9pZCI6ImUxZjZlNDBiYWUyZjRkMzE5NWVkNDQwMTllNTQ4YTcxIiwiZG9tYWluX2lkIjoib2NpZDEuZG9tYWluLm9jMS4uYWFhYWFhYWFmaHJwYzQyZ3V6b3Vjdm93NG1tM3Joc2t5eGVlZ2RkeHNzbzJuY2Z2eWI3NGFvMmZwbmthIiwic3ViX3R5cGUiOiJjbGllbnQiLCJzY29wZSI6IlwvaWNcL2FwaVwvIiwiY2xpZW50X3RlbmFudG5hbWUiOiJpZGNzLTdjODQ5MWVhNmQxOTQ3M2FiZGQyNjY5MDYwMTQ0OTIxIiwicmVnaW9uX25hbWUiOiJldS1mcmFua2Z1cnQtaWRjcy0xIiwiZXhwIjoxNzI4OTkzMDY2LCJpYXQiOjE3Mjg5ODk0NjYsImNsaWVudF9ndWlkIjoiMTUyZjFkMzMxZGZkNGY0MGI2YTc2MzU2OTM5ZGM3Y2YiLCJjbGllbnRfbmFtZSI6IlhYR1JfSElQX1RPX09JQyAob3VkZSBuYWFtIG9pY3RzdC1mcnNjYTFzaXJ4eGtfT2F1dGhfSElQKSIsInRlbmFudCI6ImlkY3MtN2M4NDkxZWE2ZDE5NDczYWJkZDI2NjkwNjAxNDQ5MjEiLCJqdGkiOiIwYzI0ZWVlNGU0ZWI0MjhkOWJhOGNiNjMzZTFlOTU4MiIsImd0cCI6ImNjIiwib3BjIjpmYWxzZSwic3ViX21hcHBpbmdhdHRyIjoidXNlck5hbWUiLCJwcmltVGVuYW50IjpmYWxzZSwidG9rX3R5cGUiOiJBVCIsImNhX2d1aWQiOiJjYWNjdC03ZTdhZDNhODFiMzk0MWNiODk3ZWQ2MjAwYTU5MGY0MyIsImF1ZCI6WyJodHRwczpcL1wvM0Q1MzQ2MTI2MDJFNEI0M0FFNTk0MzRGNTExN0E2NDcuaW50ZWdyYXRpb24ub2NwLm9yYWNsZWNsb3VkLmNvbTo0NDMiLCJodHRwczpcL1wvb2ljdHN0LWZyc2NhMXNpcnh4ay1mci5pbnRlZ3JhdGlvbi5vY3Aub3JhY2xlY2xvdWQuY29tOjQ0MyIsInVybjpvcGM6bGJhYXM6bG9naWNhbGd1aWQ9M0Q1MzQ2MTI2MDJFNEI0M0FFNTk0MzRGNTExN0E2NDciXSwiY2FfbmFtZSI6InJvdHRlcmRhbTAxMCIsImRvbWFpbiI6InJvdHRlcmRhbTAxMC10c3Qtc2VydmljZSIsInRlbmFudF9pc3MiOiJodHRwczpcL1wvaWRjcy03Yzg0OTFlYTZkMTk0NzNhYmRkMjY2OTA2MDE0NDkyMS5pZGVudGl0eS5vcmFjbGVjbG91ZC5jb206NDQzIiwicmVzb3VyY2VfYXBwX2lkIjoiZjkxMjkyMGM2ZmFiNDE0NzhmZWI3YTcwYzU0MDM4OTYifQ.ZmAMaDX2NHHKOiuAlTIhrCBg05y88klnrBZ4cuPaQRBiRfVRRiEaRXAraQBwQIV1yPR-aqF8mKA8Apb1EunPEKj5sgXr28JR1glXidlDlvbljO4OevjoQoFpuZpzyF4HFAllop7vxAQxRDAloAZZmGTkqEMkTNm0ioQire9tfIR6kanS3rlvAM0cf_bRCj8Z4w-BKWrPLEL5u_SS-x81wAcpouynRfTkVB0Don3F0-fCocChXvLGQMRqiNDxdPj1CzW776dW2oOVT-hwj_wuqXHn3mjMjZqr02XhHPvNUnJmEqtjJLQLwLU5HF8Pj3eQHdd3i7W0dzZFXjN0DE-OuQ"

	extractJWTInfo(tokenString)
}
